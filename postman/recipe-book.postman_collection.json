{
	"info": {
		"_postman_id": "8b9c3a27-710d-4b99-a8ee-683dc1204bb2",
		"name": "recipe-book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "recipe",
			"item": [
				{
					"name": "create-recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const getRecipesReq = { url: `${protocol}://${apiRoot}/recipes` }",
									"",
									"// count the number of recipes before the POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('getRecipesReq', JSON.stringify(getRecipesReq))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// extract and store the UUID for later",
									"const { message } = pm.response.json()",
									"const recipeToDelete = message.substr(23, 24)",
									"pm.collectionVariables.set('recipeToDelete', recipeToDelete)",
									"",
									"// make request for PUT and DELETE",
									"const getRecipeToDeleteReq = { url: `${protocol}://${apiRoot}/recipes/${recipeToDelete}` }",
									"pm.collectionVariables.set('getRecipeToDeleteReq', JSON.stringify(getRecipeToDeleteReq))",
									"",
									"// count the number of recipes after the POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('One more recipe exists than before', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes + 1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Small Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"breakfast\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-short",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"xx\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"'Boom!/Chicken's #great_time' is OK, but '@@@' is not\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-already-exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Small Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "preptime-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"dinner\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "ingredients-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"breakfast\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "instructions-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"asdf\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-valid-unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-invalid-unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"unit\": \"asdf\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-unit-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-pieces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(getRecipesReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the current recipe count visible to tests",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipesReq = JSON.parse(pm.collectionVariables.get('getRecipesReq'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(getRecipesReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"unit\": \"pieces\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure many recipes are returned",
									"pm.test('Multiple recipes returned', () => pm.expect(jsonResponse.length).to.greaterThan(1))",
									"",
									"// ensure each recipe is complete",
									"pm.test('Recipes are complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'media',",
									"        'title',",
									"        'uploader',",
									"        'createdOn',",
									"        'modifiedOn',",
									"        'category',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions'",
									"    ]",
									"    jsonResponse.forEach(recipe => pm.expect(recipe).to.have.all.keys(...expectedRecipeKeys))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipe-by-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure recipe is complete",
									"pm.test('Recipe is complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'media',",
									"        'title',",
									"        'uploader',",
									"        'createdOn',",
									"        'modifiedOn',",
									"        'category',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions'",
									"    ]",
									"    pm.expect(jsonResponse).to.have.all.keys(...expectedRecipeKeys)",
									"})",
									"",
									"// check that the recipe returned is the recipe requested",
									"pm.test('Correct recipe returned', () => {",
									"    const expectedId = pm.collectionVariables.get('recipeOfInterest')",
									"    pm.expect(jsonResponse._id).to.equal(expectedId)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.not.equal(oldRecipe.title)",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        oldRecipe.title = newRecipeTitle",
									"    })",
									"    pm.test('Recipe about has changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.not.equal(oldRecipe.about)",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        oldRecipe.about = newRecipeAbout",
									"    })",
									"    pm.test('Recipe category has changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.not.equal(oldRecipe.category)    ",
									"",
									"        // set old category to new category to enable consecutive runs without fail",
									"        oldRecipe.category = newRecipeCategory",
									"    })",
									"    pm.test('Recipe modification date has changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.greaterThan(oldRecipe.modifiedOn)",
									"    })",
									"    pm.test('Recipe preparation time has changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.not.deep.equal(oldRecipe.prepTime) ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        oldRecipe.prepTime = newRecipePrepTime",
									"    })",
									"    pm.test('Recipe ingredients list has changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.not.deep.equal(oldRecipe.ingredients)",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        oldRecipe.ingredients = newRecipeIngredients",
									"    })",
									"    pm.test('Recipe instructions set has changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.not.deep.equal(oldRecipe.instructions)",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        oldRecipe.instructions = newRecipeInstructions",
									"    })",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipe = {}",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipe.title.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipe.about.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipe.prepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipe.prepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipe.ingredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipe.instructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipe.category === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"",
									"    // has to be individual for the body",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"xx\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-bad-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"'Boom!/Chicken's #great_time' is OK, but '@@@' is not\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-invalid-already-exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Linda's Cake\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"asdf\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "preptime-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ingredients-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instructions-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipe.title)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipe.about)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipe.category)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipe.modifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipe.prepTime)",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipe.ingredients)",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipe.instructions)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"const oldRecipe = JSON.parse(pm.collectionVariables.get('oldRecipe'))",
									"",
									"// get current values from recipe before the PUT requests",
									"pm.sendRequest(getRecipeToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    oldRecipe.title = jsonRes.title",
									"    oldRecipe.about = jsonRes.about",
									"    oldRecipe.prepTime = jsonRes.prepTime",
									"    oldRecipe.ingredients = jsonRes.ingredients",
									"    oldRecipe.instructions = jsonRes.instructions",
									"    oldRecipe.category = jsonRes.category",
									"    oldRecipe.modifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // make the current recipe properties visible to tests",
									"    pm.collectionVariables.set('oldRecipe', JSON.stringify(oldRecipe))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"",
									"pm.sendRequest(getRecipeToDeleteReq,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the recipe no longer exists after the DELETE request",
									"    pm.test('Recipe no longer exists after request', () => pm.expect(res.code).to.be.equal(404))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getRecipeToDeleteReq = JSON.parse(pm.collectionVariables.get('getRecipeToDeleteReq'))",
									"",
									"pm.sendRequest(getRecipeToDeleteReq,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the recipe currently exists before the DELETE request",
									"    pm.test('Recipe exists before request', () => pm.expect(res.code).to.be.equal(200))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "recipe-media",
			"item": [
				{
					"name": "create-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const recipeOfInterest = pm.collectionVariables.get('recipeOfInterest')",
									"const getRecipeOfInterestReq = { url: `${protocol}://${apiRoot}/recipes/${recipeOfInterest}` }",
									"",
									"pm.collectionVariables.set('getRecipeOfInterestReq', JSON.stringify(getRecipeOfInterestReq))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"const { context } = pm.response.json()",
									"",
									"// extract a filename for later",
									"pm.collectionVariables.set('recipeMediaToGet', context.cleared[0].unique)",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Only a single image was linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/cake.jpg",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only one image linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only one image linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only one image linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipe-media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media/{{recipeMediaToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media",
								"{{recipeMediaToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media/{{recipeMediaFilenameToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media",
								"{{recipeMediaFilenameToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media/asdfasdfasdfasdfasdfasdfasdfasdf.jpg",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media",
								"asdfasdfasdfasdfasdfasdfasdfasdf.jpg"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"const { context } = pm.response.json()",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Now three recipes are linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only three images linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only three images linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Still only three images linked to the recipe', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const recipeOfInterest = pm.collectionVariables.get('recipeOfInterest')",
									"const req = { url: `${protocol}://${apiRoot}/recipes/${recipeOfInterest}` }",
									"",
									"pm.collectionVariables.set('deleteMediaTestGetRecipeById', JSON.stringify(req))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('All images were unlinked from the recipe', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getRecipeOfInterestReq = JSON.parse(pm.collectionVariables.get('getRecipeOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(getRecipeOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('All images still unlinked from the recipe', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "create-user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const getUsersReq = { url: `${protocol}://${apiRoot}/users` }",
									"",
									"// count the number of users before the POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('getUsersReq', JSON.stringify(getUsersReq))",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// extract and store the UUID for later",
									"const { message } = pm.response.json()",
									"const userToDelete = message.substr(21, 24)",
									"pm.collectionVariables.set('userToDelete', userToDelete)",
									"",
									"// make request for PUT and DELETE",
									"const getUserToDeleteReq = { url: `${protocol}://${apiRoot}/users/${userToDelete}` }",
									"pm.collectionVariables.set('getUserToDeleteReq', JSON.stringify(getUserToDeleteReq))",
									"",
									"// count the number of users after the POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('One more user exists than before', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers + 1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-first-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"middle\": \"Mercedez\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-first-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Sus.an\",\n        \"middle\": \"M.\",\n        \"last\": \"Be-nz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-middle-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"middle\": \"M.123\",\n        \"last\": \"'Be-nz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-last-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"middle\": \"Mercedez\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-last-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"'Susan\",\n        \"middle\": \"\",\n        \"last\": \"Be-8576@nz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-short",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new12\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123!@#$%^&:\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-already-exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "password-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-invalid-long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susans@exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-invalid-bad-characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"su@hgv78687@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-invalid-already-exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"",
									"// count the number of users before the bad POST request",
									"pm.sendRequest(getUsersReq,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldUsers = res.json().message.length",
									"",
									"    // make the current user count visible to tests",
									"    pm.collectionVariables.set('numOldUsers', numOldUsers)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUsersReq = JSON.parse(pm.collectionVariables.get('getUsersReq'))",
									"const numOldUsers = pm.collectionVariables.get('numOldUsers')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of users after the bad POST request",
									"pm.sendRequest(getUsersReq, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of users exists', () => {",
									"        const numNewUsers = res.json().message.length",
									"        pm.expect(numNewUsers).to.be.equal(numOldUsers)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Susan\",\n        \"last\": \"Benz\"\n    },\n    \"username\": \"new123123\",\n    \"password\": \"P@ssword23!\",\n    \"email\": \"susan@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure many users are returned",
									"pm.test('Multiple users returned', () => pm.expect(jsonResponse.length).to.greaterThan(1))",
									"",
									"// ensure each user is complete",
									"pm.test('Users are complete', () => {",
									"    const expectedUserKeys = [",
									"        '_id',",
									"        'name',",
									"        'active',",
									"        'media',",
									"        'username',",
									"        'email',",
									"        'registered'",
									"    ]",
									"    jsonResponse.forEach(user => pm.expect(user).to.have.all.keys(...expectedUserKeys))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-user-by-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure user is complete",
									"pm.test('User is complete', () => {",
									"    const expectedUserKeys = [",
									"        '_id',",
									"        'name',",
									"        'active',",
									"        'media',",
									"        'username',",
									"        'email',",
									"        'registered'",
									"    ]",
									"    pm.expect(jsonResponse).to.have.all.keys(...expectedUserKeys)",
									"})",
									"",
									"// check that the user returned is the recipe requested",
									"pm.test('Correct user returned', () => {",
									"    const expectedId = pm.collectionVariables.get('userOfInterest')",
									"    pm.expect(jsonResponse._id).to.equal(expectedId)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.not.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.not.equal(oldUser.name.last)",
									"",
									"        // set old name to new name to enable consecutive runs without fail",
									"        oldUser.name = newUserName",
									"    })",
									"    pm.test('User username has changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.not.equal(oldUser.username)",
									"",
									"        // set old username to new username to enable consecutive runs without fail",
									"        oldUser.username = newUserUsername",
									"    })",
									"    pm.test('User email has changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.not.equal(oldUser.email)",
									"",
									"        // set old email to new email to enable consecutive runs without fail",
									"        oldUser.email = newUserEmail",
									"    })",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // new name is the old name reversed",
									"    const newUserName = {",
									"        ...oldUser.name,",
									"        first: oldUser.name.last,",
									"        last: oldUser.name.first",
									"    }",
									"",
									"    // new username is the old username in reverse",
									"    const newUserUsername = oldUser.username.split('').reverse().join('')",
									"",
									"    // new email is the old email user and domain swapped",
									"    const parts = oldUser.email.split('@')",
									"    const userPart = parts[0]",
									"    const domainPart = parts[1].split('.')[0]",
									"    const newUserEmail = `${domainPart}@${userPart}.com`",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"    pm.collectionVariables.set('newUserName', JSON.stringify(newUserName))",
									"    pm.collectionVariables.set('newUserUsername', newUserUsername)",
									"    pm.collectionVariables.set('newUserEmail', newUserEmail)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "password-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\",\n    \"password\": \"$$$changedPass#@word\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-first-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"middle\": \"Ana\",\n        \"last\": \"Sett\"\n    },\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-first-invalid-bad-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"@Rita\",\n        \"middle\": \"Ana\",\n        \"last\": \"Sett\"\n    },\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-last-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Rita\",\n        \"middle\": \"Ana\"\n    },\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "name-last-invalid-bad-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\n        \"first\": \"Rita\",\n        \"middle\": \"Ana\",\n        \"last\": \"@#Sett\"\n    },\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"short\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"longggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-bad-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"@#$%^!@\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "username-invalid-already-exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"Bale7Passive\",\n    \"email\": \"{{newUserEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"{{newUserUsername}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-invalid-bad-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"alsajknd@,amsd n@a,ms d\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "email-invalid-already-exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"const oldUser = JSON.parse(pm.collectionVariables.get('oldUser'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from user after the PUT request",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('User name has not changed', () => {",
									"        const newUserName = jsonRes.name",
									"        pm.expect(newUserName.first).to.equal(oldUser.name.first)",
									"        pm.expect(newUserName.last).to.equal(oldUser.name.last)",
									"    })",
									"    pm.test('User username has not changed', () => {",
									"        const newUserUsername = jsonRes.username",
									"        pm.expect(newUserUsername).to.equal(oldUser.username)",
									"    })",
									"    pm.test('User email has not changed', () => {",
									"        const newUserEmail = jsonRes.email",
									"        pm.expect(newUserEmail).to.equal(oldUser.email)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"// get current values from user before the PUT requests",
									"pm.sendRequest(getUserToDeleteReq, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldUser = {}",
									"    oldUser.name = jsonRes.name",
									"    oldUser.username = jsonRes.username",
									"    oldUser.email = jsonRes.email",
									"",
									"    // make the current user properties visible to tests",
									"    pm.collectionVariables.set('oldUser', JSON.stringify(oldUser))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{newUserName}},\n    \"username\": \"{{newUserUsername}}\",\n    \"email\": \"mcfaddenbruce@techade.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"pm.sendRequest(getUserToDeleteReq,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the user no longer exists after the DELETE request",
									"    pm.test('User no longer exists after request', () => pm.expect(res.code).to.be.equal(404))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getUserToDeleteReq = JSON.parse(pm.collectionVariables.get('getUserToDeleteReq'))",
									"",
									"pm.sendRequest(getUserToDeleteReq,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the user currently exists before the DELETE request",
									"    pm.test('User exists before request', () => pm.expect(res.code).to.be.equal(200))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "sign-user-in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/users/register`,",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/json' },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            name: { first: 'Susan', last: 'Benz' },",
									"            username: 'new123',",
									"            password: 'P@ssword23!',",
									"            email: 'susan@example.com'",
									"        })",
									"    }",
									"}",
									"",
									"// // create a user to be signed into the application",
									"// pm.sendRequest(req,  (err, res) => {",
									"//     if (err) throw err",
									"// })"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/signin",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "sign-user-out",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new123\",\n    \"password\": \"P@ssword23!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/signout",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"signout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user-media",
			"item": [
				{
					"name": "create-user-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"const { context } = pm.response.json()",
									"",
									"// extract a filename for later",
									"pm.collectionVariables.set('userMediaToGet', context.cleared[0].unique)",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename now linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/dice.png",
										"media/evil"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-already-exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"const { context } = pm.response.json()",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename now linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/dice.png",
										"media/evil"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": "media/evil"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": "media/dice.png"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-user-media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media/{{userMediaToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media",
								"{{userMediaToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf/media/{{userMediaToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf",
								"media",
								"{{userMediaToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media/asdfasdfasdfasdfasdfasdfasdfasdf.jpg",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media",
								"asdfasdfasdfasdfasdfasdfasdfasdf.jpg"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-user-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"const { context } = pm.response.json()",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userImage",
									"type": "file",
									"src": [
										"media/bad.zip",
										"media/cake.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still linked to the user', () => {",
									"        pm.expect(media.length).to.greaterThan(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-user-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename no longer linked to the user', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/{{userOfInterest}}/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"{{userOfInterest}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getUserOfInterestReq = JSON.parse(pm.collectionVariables.get('getUserOfInterestReq'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get user object for direct validation",
									"pm.sendRequest(getUserOfInterestReq,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // user was updated properly in the database",
									"    pm.test('Filename still not linked to the user', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/users/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"users",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// set variables to form a request",
							"const apiRoot = pm.collectionVariables.get('apiRoot')",
							"const protocol = pm.collectionVariables.get('protocol')",
							"const userOfInterest = pm.collectionVariables.get('userOfInterest')",
							"const getUserOfInterestReq = { url: `${protocol}://${apiRoot}/users/${userOfInterest}` }",
							"",
							"pm.collectionVariables.set('getUserOfInterestReq', JSON.stringify(getUserOfInterestReq))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// enumeration for testing modes",
					"const modes = {",
					"    DEV: 'development',",
					"    PROD: 'production'",
					"}",
					"",
					"// DEV for localhost or PROD for production environment",
					"const mode = modes.DEV",
					"",
					"// determine whether to use HTTP or HTTPS",
					"const protocol = mode === modes.PROD ? 'https' : 'http'",
					"pm.collectionVariables.set('protocol', protocol)",
					"",
					"// determine API root",
					"const productionDomain = '<make production domain>'",
					"const developmentDomain = 'localhost:3000'",
					"const apiRoot = mode === modes.PROD ? productionDomain : developmentDomain",
					"pm.collectionVariables.set('apiRoot', `${apiRoot}/api`)",
					"",
					"// specific recipe ID for API operations",
					"pm.collectionVariables.set('recipeOfInterest', '614009af5b338a1dd33615e3')",
					"pm.collectionVariables.set('userOfInterest', '61525d0aa5d095230e1fc762')"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "apiRoot",
			"value": "localhost:3000/api"
		},
		{
			"key": "recipeOfInterest",
			"value": "614009af5b338a1dd33615e3"
		},
		{
			"key": "userOfInterest",
			"value": "61525d0aa5d095230e1fc762"
		},
		{
			"key": "getRecipesReq",
			"value": ""
		},
		{
			"key": "numOldRecipes",
			"value": ""
		},
		{
			"key": "recipeToDelete",
			"value": ""
		},
		{
			"key": "getRecipeToDeleteReq",
			"value": ""
		},
		{
			"key": "oldRecipe",
			"value": ""
		},
		{
			"key": "newRecipeTitle",
			"value": ""
		},
		{
			"key": "newRecipeAbout",
			"value": ""
		},
		{
			"key": "newRecipeCategory",
			"value": ""
		},
		{
			"key": "newRecipePrepTime",
			"value": ""
		},
		{
			"key": "newRecipeIngredients",
			"value": ""
		},
		{
			"key": "newRecipeInstructions",
			"value": ""
		},
		{
			"key": "getRecipeOfInterestReq",
			"value": ""
		},
		{
			"key": "recipeMediaToGet",
			"value": ""
		},
		{
			"key": "deleteMediaTestGetRecipeById",
			"value": ""
		},
		{
			"key": "getUsersReq",
			"value": ""
		},
		{
			"key": "numOldUsers",
			"value": ""
		},
		{
			"key": "userToDelete",
			"value": ""
		},
		{
			"key": "getUserToDeleteReq",
			"value": ""
		},
		{
			"key": "oldUser",
			"value": ""
		},
		{
			"key": "newUserName",
			"value": ""
		},
		{
			"key": "newUserUsername",
			"value": ""
		},
		{
			"key": "newUserEmail",
			"value": ""
		},
		{
			"key": "getUserOfInterestReq",
			"value": ""
		},
		{
			"key": "userMediaToGet",
			"value": ""
		}
	]
}