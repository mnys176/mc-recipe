{
	"info": {
		"_postman_id": "27f8f82d-38e1-4183-a13e-8876b9d8aba8",
		"name": "mc-recipe",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "recipe",
			"item": [
				{
					"name": "failures",
					"item": [
						{
							"name": "recipe-not-found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// assert that status code is 200",
											"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes/asdhgfasdhgfasdhgfasdhgf",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes",
										"asdhgfasdhgfasdhgfasdhgf"
									]
								}
							},
							"response": []
						},
						{
							"name": "title-not-included",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "preptime-not-included",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "ingredients-not-included",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "instructions-not-included",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "quantifiable-quantity-not-included-with-valid-unit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "quantifiable-quantity-not-included-with-invalid-unit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"unit\": \"asdf\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "quantifiable-unit-not-included",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						},
						{
							"name": "quantifiable-quantity-not-included-with-pieces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set variables to form a request",
											"const apiRoot = pm.collectionVariables.get('apiRoot')",
											"const protocol = pm.collectionVariables.get('protocol')",
											"const req = {",
											"    url: `${protocol}://${apiRoot}/recipes`,",
											"    method: 'GET',",
											"    headers: { 'Content-Type': 'application/json' }",
											"}",
											"",
											"// count the number of recipes before the bad POST request",
											"pm.sendRequest(req,  (err, res) => {",
											"    if (err) throw err",
											"    const numOldRecipes = res.json().length",
											"",
											"    // make the request and current recipe count visible to tests",
											"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
											"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get relevant collection variables",
											"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
											"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
											"",
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the bad POST request",
											"pm.sendRequest(req, (err, res) => {",
											"    if (err) throw err",
											"    pm.test('Same number of recipes exists', () => {",
											"        const numNewRecipes = res.json().length",
											"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"unit\": \"pieces\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{apiRoot}}/recipes",
									"protocol": "{{protocol}}",
									"host": [
										"{{apiRoot}}"
									],
									"path": [
										"recipes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get-recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json()",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure many recipes are returned",
									"pm.test('Multiple recipes returned', () => pm.expect(jsonResponse.length).to.greaterThan(1))",
									"",
									"// ensure each recipe is complete",
									"pm.test('Recipes are complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'title',",
									"        'uploader',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions',",
									"        '__v'",
									"    ]",
									"    jsonResponse.forEach(recipe => pm.expect(recipe).to.have.all.keys(...expectedRecipeKeys))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipe-by-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json()",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure recipe is complete",
									"pm.test('Recipe is complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'title',",
									"        'uploader',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions',",
									"        '__v'",
									"    ]",
									"    pm.expect(jsonResponse).to.have.all.keys(...expectedRecipeKeys)",
									"})",
									"",
									"// check that the recipe returned is the recipe requested",
									"pm.test('Correct recipe returned', () => {",
									"    const expectedId = '612e3cd92f83fd7610daa5ca'",
									"    pm.expect(jsonResponse._id).to.equal(expectedId)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/612e3cd92f83fd7610daa5ca",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"612e3cd92f83fd7610daa5ca"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"",
									"// count the number of recipes before the POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// extract and store the UUID for later",
									"const message = pm.response.json().message",
									"console.log(message)",
									"const objectIdToDelete = message.substr(29, 24)",
									"pm.collectionVariables.set('recipeObjectIdToDelete', objectIdToDelete)",
									"",
									"// count the number of recipes after the POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('One more recipe exists than before', () => {",
									"        const numNewRecipes = res.json().length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes + 1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// enumeration for testing modes",
					"const modes = {",
					"    DEV: 'development',",
					"    PROD: 'production'",
					"}",
					"",
					"// DEV for localhost or PROD for Cloud Foundry",
					"const mode = modes.DEV",
					"",
					"// determine whether to use HTTP or HTTPS",
					"const protocol = mode === modes.PROD ? 'https' : 'http'",
					"pm.collectionVariables.set('protocol', protocol)",
					"",
					"// determine API root",
					"const productionDomain = '<make production domain>'",
					"const developmentDomain = 'localhost:3000'",
					"const apiRoot = mode === modes.PROD ? productionDomain : developmentDomain",
					"pm.collectionVariables.set('apiRoot', `${apiRoot}/api`)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": ""
		},
		{
			"key": "apiRoot",
			"value": ""
		},
		{
			"key": "postTestGetRecipes",
			"value": ""
		},
		{
			"key": "numOldRecipes",
			"value": ""
		},
		{
			"key": "recipeObjectIdToDelete",
			"value": ""
		}
	]
}