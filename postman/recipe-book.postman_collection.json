{
	"info": {
		"_postman_id": "78ab260d-dd19-4195-abad-616734c28cb4",
		"name": "recipe-book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "name-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "name-first-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: { last: pm.variables.replaceIn('{{$randomLastName}}'), middle },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "name-first-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: '{}@#@#@#@#@bad',",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "name-middle-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle: '{}@#@#@#@#@bad'",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "name-last-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: { first: pm.variables.replaceIn('{{$randomFirstName}}'), middle },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "name-last-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        last: '{}@#@#@#@#@bad',",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "username-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-short",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: '_',",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-long",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: 'longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg',",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: '{}@#@#@#@#@bad',",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-already-exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: 'Bale7Passive',",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "password-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "email-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-long",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: 'susans@exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: 'su@hgv78687@example.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-already-exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: 'mcfaddenbruce@techade.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// count the number of users before the POST request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const getUsersReq = { url: `${apiRoot}/users` }",
											"pm.sendRequest(getUsersReq,  (err, res) => {",
											"    if (err) throw err",
											"    const oldUserCount = res.json().message.length",
											"    pm.variables.set('oldUserCount', oldUserCount)",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of users after the POST request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const getUsersReq = { url: `${apiRoot}/users` }",
											"pm.sendRequest(getUsersReq, (err, res) => {",
											"    if (err) throw err",
											"    const oldUserCount = pm.variables.get('oldUserCount')",
											"    pm.test('Same number of users exists', () => {",
											"        const newUserCount = res.json().message.length",
											"        pm.expect(newUserCount).to.be.equal(oldUserCount)",
											"    })",
											"})"
										]
									}
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "create-user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))",
													"",
													"// count the number of users before the POST request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getUsersReq = { url: `${apiRoot}/users` }",
													"pm.sendRequest(getUsersReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldUserCount = res.json().message.length",
													"    pm.variables.set('oldUserCount', oldUserCount)",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// count the number of users after the POST request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getUsersReq = { url: `${apiRoot}/users` }",
													"pm.sendRequest(getUsersReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldUserCount = pm.variables.get('oldUserCount')",
													"    pm.test('One more user exists than before', () => {",
													"        const newUserCount = res.json().message.length",
													"        pm.expect(newUserCount).to.be.equal(oldUserCount + 1)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/register",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "read",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "get-users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const users = pm.response.json().message",
													"",
													"// ensure many users are returned",
													"pm.test('Multiple users returned', () => pm.expect(users.length).to.greaterThan(1))",
													"",
													"// ensure each user is complete",
													"pm.test('Users are complete', () => {",
													"    const expectedUserKeys = [",
													"        '_id',",
													"        'name',",
													"        'active',",
													"        'media',",
													"        'username',",
													"        'email',",
													"        'registered'",
													"    ]",
													"    users.forEach(user => pm.expect(user).to.have.all.keys(...expectedUserKeys))",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "get-user-by-id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get response as JSON",
													"const user = pm.response.json().message",
													"",
													"// ensure user is complete",
													"pm.test('User is complete', () => {",
													"    const expectedUserKeys = [",
													"        '_id',",
													"        'name',",
													"        'active',",
													"        'media',",
													"        'username',",
													"        'email',",
													"        'registered'",
													"    ]",
													"    pm.expect(user).to.have.all.keys(...expectedUserKeys)",
													"})",
													"",
													"// check that the user returned is the recipe requested",
													"pm.test('Correct user returned', () => {",
													"    const expectedId = pm.environment.get('EXISTING_USER')",
													"    pm.expect(user._id).to.equal(expectedId)",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 200",
											"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "update",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "name-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "name-first-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: { last: pm.variables.replaceIn('{{$randomLastName}}') },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "name-first-invalid-bad-characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: {",
													"        first: '{}@#@#@#@#@bad',",
													"        last: pm.variables.replaceIn('{{$randomLastName}}')",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "name-middle-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle: '{}@#@#@#@#@bad'",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "name-last-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: { first: pm.variables.replaceIn('{{$randomFirstName}}') },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "name-last-invalid-bad-characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        last: '{}@#@#@#@#@bad'",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "username-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: '_',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: 'longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-bad-characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: '{}@#@#@#@#@bad',",
													"    password: 'P@ssword23!',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "username-invalid-already-exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: 'Maternal6Mere',",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "email-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-long",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: 'susans@exampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-bad-characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: 'su@hgv78687@example.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "email-invalid-already-exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: 'waltersholmes@techade.com'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get current values from user before the PUT requests",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUserId = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUserId}` }",
											"pm.sendRequest(getExistingUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const { name, username, email } = res.json().message",
											"    ",
											"    // assemble old values",
											"    const oldUser = {}",
											"    oldUser.name = name",
											"    oldUser.username = username",
											"    oldUser.email = email",
											"",
											"    // make the current user properties visible to collection",
											"    pm.variables.set('oldUser', JSON.stringify(oldUser))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// get values from user after the PUT request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUserId = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUserId}` }",
											"pm.sendRequest(getExistingUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const oldUser = JSON.parse(pm.variables.get('oldUser'))",
											"    const { name, username, email } = res.json().message",
											"    pm.test('User name has not changed', () => {",
											"        pm.expect(name.first).to.equal(oldUser.name.first)",
											"        pm.expect(name.last).to.equal(oldUser.name.last)",
											"    })",
											"    pm.test('User username has not changed', () => {",
											"        pm.expect(username).to.equal(oldUser.username)",
											"    })",
											"    pm.test('User email has not changed', () => {",
											"        pm.expect(email).to.equal(oldUser.email)",
											"    })",
											"})"
										]
									}
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "update-user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get values from user after the PUT request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUserId = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUserId}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldUser = JSON.parse(pm.variables.get('oldUser'))",
													"    const { name, username, email } = res.json().message",
													"    pm.test('User name has changed', () => {",
													"        pm.expect(name.first).to.not.equal(oldUser.name.first)",
													"        pm.expect(name.last).to.not.equal(oldUser.name.last)",
													"    })",
													"    pm.test('User username has changed', () => {",
													"        pm.expect(username).to.not.equal(oldUser.username)",
													"    })",
													"    pm.test('User email has changed', () => {",
													"        pm.expect(email).to.not.equal(oldUser.email)",
													"    })",
													"    pm.variables.set('oldUser', JSON.stringify(oldUser))",
													"",
													"    // replace original values",
													"    const restoreUserInfoReq = {",
													"        url: `${apiRoot}/users/${existingUserId}`,",
													"        method: 'PUT',",
													"        header: { 'Content-Type': 'application/json' },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify({",
													"                name: { first: 'Bruce', last: 'Mcfadden' },",
													"                username: 'Bale7Passive',",
													"                email: 'mcfaddenbruce@techade.com'",
													"            })",
													"        }",
													"    }",
													"    pm.sendRequest(restoreUserInfoReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const middleNameType = { NONE: 0, INITIAL: 1, FULL: 2 }",
													"let middle = undefined",
													"switch (Math.floor(Math.random() * 1000000) % 3) {",
													"    case middleNameType.INITIAL:",
													"        const randomCharAscii = Math.floor(Math.random() * 1000000) % 26 + 65",
													"        middle = `${String.fromCharCode(randomCharAscii)}.`",
													"        break",
													"    case middleNameType.FULL:",
													"        middle = pm.variables.replaceIn('{{$randomFirstName}}')",
													"        break",
													"    default:",
													"        break",
													"}",
													"const body = {",
													"    name: {",
													"        first: pm.variables.replaceIn('{{$randomFirstName}}'),",
													"        last: pm.variables.replaceIn('{{$randomLastName}}'),",
													"        middle",
													"    },",
													"    username: pm.variables.replaceIn('{{$randomUserName}}'),",
													"    email: pm.variables.replaceIn('{{$randomEmail}}')",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "password-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get values from user after the PUT request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUserId = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUserId}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldUser = JSON.parse(pm.variables.get('oldUser'))",
													"    const { name, username, email } = res.json().message",
													"    pm.test('User name has not changed', () => {",
													"        pm.expect(name.first).to.equal(oldUser.name.first)",
													"        pm.expect(name.last).to.equal(oldUser.name.last)",
													"    })",
													"    pm.test('User username has not changed', () => {",
													"        pm.expect(username).to.equal(oldUser.username)",
													"    })",
													"    pm.test('User email has not changed', () => {",
													"        pm.expect(email).to.equal(oldUser.email)",
													"    })",
													"",
													"    // replace original values",
													"    const restoreUserInfoReq = {",
													"        url: `${apiRoot}/users/${existingUserId}`,",
													"        method: 'PUT',",
													"        header: { 'Content-Type': 'application/json' },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify({",
													"                name: { first: 'Bruce', last: 'Mcfadden' },",
													"                username: 'Bale7Passive',",
													"                email: 'mcfaddenbruce@techade.com',",
													"                password: 'P@ssword23!'",
													"            })",
													"        }",
													"    }",
													"    pm.sendRequest(restoreUserInfoReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldUser = JSON.parse(pm.variables.get('oldUser'))",
													"const body = { ...oldUser, password: '$$$changedPass#@word' }",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get current values from user before the PUT requests",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUserId = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUserId}` }",
											"pm.sendRequest(getExistingUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const { name, username, email } = res.json().message",
											"    ",
											"    // create a rotation cycle that constantly changes values",
											"    const oldUser = {}",
											"    oldUser.name = name",
											"    oldUser.username = username",
											"    oldUser.email = email",
											"",
											"    // make the current user properties visible to collection",
											"    pm.variables.set('oldUser', JSON.stringify(oldUser))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 200",
											"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "delete-user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// count the number of users after the DELETE request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getUsersReq = { url: `${apiRoot}/users` }",
													"pm.sendRequest(getUsersReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldUserCount = pm.variables.get('oldUserCount')",
													"    pm.test('One less user exists than before', () => {",
													"        const newUserCount = res.json().message.length",
													"        pm.expect(newUserCount).to.be.equal(oldUserCount - 1)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// count the number of users before the DELETE request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getUsersReq = { url: `${apiRoot}/users` }",
													"pm.sendRequest(getUsersReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldUserCount = res.json().message.length",
													"    const userToDelete = res.json().message[oldUserCount - 1]._id",
													"",
													"    pm.variables.set('userToDelete', userToDelete)",
													"    pm.variables.set('oldUserCount', oldUserCount)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{userToDelete}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "authenticate",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "username-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// delete created user",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const deleteUserReq = {",
													"    url: `${apiRoot}/users/${userToDelete}`,",
													"    method: 'DELETE'",
													"}",
													"pm.sendRequest(deleteUserReq, err => {",
													"    if (err) throw err",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "password-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: 'UsernameTester.78'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// delete created user",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const deleteUserReq = {",
													"    url: `${apiRoot}/users/${userToDelete}`,",
													"    method: 'DELETE'",
													"}",
													"pm.sendRequest(deleteUserReq, err => {",
													"    if (err) throw err",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "user-already-signed-in",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// sign user in",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const signInUserReq = {",
													"    url: `${apiRoot}/users/signin`,",
													"    method: 'POST',",
													"    header: { 'Content-Type': 'application/json' },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            username: 'UsernameTester.78',",
													"            password: 'P@ssword23!'",
													"        })",
													"    }",
													"}",
													"pm.sendRequest(signInUserReq, err => {",
													"    if (err) throw err",
													"})",
													"",
													"// make dynamic request body",
													"const body = {",
													"    username: 'UsernameTester.78',",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// check that the user is still labeled as 'active'",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${userToDelete}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    pm.test('User is still active in the application', () => {",
													"        const user = res.json().message",
													"        pm.expect(user.active).to.be.true;",
													"    })",
													"",
													"    // delete created user",
													"    const deleteUserReq = {",
													"        url: `${apiRoot}/users/${userToDelete}`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteUserReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "user-already-signed-out",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: 'UsernameTester.78',",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// check that the user is still labeled as not 'active'",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${userToDelete}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    pm.test('User is still inactive in the application', () => {",
													"        const user = res.json().message",
													"        pm.expect(user.active).to.be.false;",
													"    })",
													"",
													"    // delete created user",
													"    const deleteUserReq = {",
													"        url: `${apiRoot}/users/${userToDelete}`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteUserReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signout",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signout"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// make user to sign in",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const createUserReq = {",
											"    url: `${apiRoot}/users/register`,",
											"    method: 'POST',",
											"    header: { 'Content-Type': 'application/json' },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            name: { first: 'Brad', middle: 'A.', last: 'Bradson' },",
											"            username: 'UsernameTester.78',",
											"            email: 'faker@fake.com',",
											"            password: 'P@ssword23!'",
											"        })",
											"    }",
											"}",
											"pm.sendRequest(createUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const userToDelete = res.json().message.substr(21, 24)",
											"    pm.variables.set('userToDelete', userToDelete)",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))"
										]
									}
								}
							]
						},
						{
							"name": "401",
							"item": [
								{
									"name": "username-invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: 'WrongName123',",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "password-invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: 'UsernameTester.78',",
													"    password: 'WrongPassword123'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// make user to sign in",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const createUserReq = {",
											"    url: `${apiRoot}/users/register`,",
											"    method: 'POST',",
											"    header: { 'Content-Type': 'application/json' },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            name: { first: 'Brad', middle: 'A.', last: 'Bradson' },",
											"            username: 'UsernameTester.78',",
											"            email: 'faker@fake.com',",
											"            password: 'P@ssword23!'",
											"        })",
											"    }",
											"}",
											"pm.sendRequest(createUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const userToDelete = res.json().message.substr(21, 24)",
											"    pm.variables.set('userToDelete', userToDelete)",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 401",
											"pm.test('Status code is 401', () => pm.response.to.have.status(401))",
											"",
											"// delete created user",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const userToDelete = pm.variables.get('userToDelete')",
											"const deleteUserReq = {",
											"    url: `${apiRoot}/users/${userToDelete}`,",
											"    method: 'DELETE'",
											"}",
											"pm.sendRequest(deleteUserReq, err => {",
											"    if (err) throw err",
											"})"
										]
									}
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "sign-user-in",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const body = {",
													"    username: 'UsernameTester.78',",
													"    password: 'P@ssword23!'",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// check that the user is now labeled as 'active'",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${userToDelete}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    pm.test('User is now active in the application', () => {",
													"        const user = res.json().message",
													"        pm.expect(user.active).to.be.true;",
													"    })",
													"",
													"    // delete created user",
													"    const deleteUserReq = {",
													"        url: `${apiRoot}/users/${userToDelete}`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteUserReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signin",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signin"
											]
										}
									},
									"response": []
								},
								{
									"name": "sign-user-out",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// sign user in",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const signInUserReq = {",
													"    url: `${apiRoot}/users/signin`,",
													"    method: 'POST',",
													"    header: { 'Content-Type': 'application/json' },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            username: 'UsernameTester.78',",
													"            password: 'P@ssword23!'",
													"        })",
													"    }",
													"}",
													"pm.sendRequest(signInUserReq, err => {",
													"    if (err) throw err",
													"})",
													"",
													"// make dynamic request body",
													"const body = { username: 'UsernameTester.78' }",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// check that the user is now labeled as not 'active'",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const userToDelete = pm.variables.get('userToDelete')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${userToDelete}` }",
													"pm.sendRequest(getExistingUserReq, (err, res) => {",
													"    if (err) throw err",
													"    pm.test('User is now inactive in the application', () => {",
													"        const user = res.json().message",
													"        pm.expect(user.active).to.be.false;",
													"    })",
													"",
													"    // delete created user",
													"    const deleteUserReq = {",
													"        url: `${apiRoot}/users/${userToDelete}`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteUserReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/users/signout",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												"signout"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// make user to sign in",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const createUserReq = {",
											"    url: `${apiRoot}/users/register`,",
											"    method: 'POST',",
											"    header: { 'Content-Type': 'application/json' },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            name: { first: 'Brad', middle: 'A.', last: 'Bradson' },",
											"            username: 'UsernameTester.78',",
											"            email: 'faker@fake.com',",
											"            password: 'P@ssword23!'",
											"        })",
											"    }",
											"}",
											"pm.sendRequest(createUserReq, (err, res) => {",
											"    if (err) throw err",
											"    const userToDelete = res.json().message.substr(21, 24)",
											"    pm.variables.set('userToDelete', userToDelete)",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 200",
											"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "user-media",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "SETUP-media-already-exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": "/Users/mnystoriak/Workspace/recipe-book/postman/media/dice.png"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "media-already-exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 400",
													"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
													"pm.sendRequest(getExistingUserReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // user was updated properly in the database",
													"    pm.test('Filename still linked to the user', () => {",
													"        pm.expect(media.length).to.greaterThan(0)",
													"    })",
													"",
													"    // delete created media",
													"    const deleteMediaReq = {",
													"        url: `${apiRoot}/users/${existingUser}/media`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteMediaReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": [
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/dice.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/illegal.svg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/main.cpp",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/sneaky.sh"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": "media/dice.png"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "create-user-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"",
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// both cleared and rejected arrays must be present",
													"pm.test('Cleared and rejected arrays returned in an object', () => {",
													"    pm.expect(context).to.be.an('object')",
													"        .that.has.all.keys('cleared', 'rejected')",
													"})",
													"",
													"// make sure some rejects were returned to the client",
													"pm.test('Bad files were rejected', () => {",
													"    const { rejected } = context",
													"    pm.expect(rejected).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// make sure some cleared files were returned to the client",
													"pm.test('Good files were not rejected', () => {",
													"    const { cleared } = context",
													"    pm.expect(cleared).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
													"pm.sendRequest(getExistingUserReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // user was updated properly in the database",
													"    pm.test('Filename now linked to the user', () => {",
													"        pm.expect(media.length).to.greaterThan(0)",
													"    })",
													"",
													"    // delete created media",
													"    const deleteMediaReq = {",
													"        url: `${apiRoot}/users/${existingUser}/media`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteMediaReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": [
														"media/a.out",
														"media/bad.zip",
														"media/dice.png",
														"media/evil"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "204",
							"item": [
								{
									"name": "media-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "only-rejected-media-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": "media/evil"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get user object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUser = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
											"pm.sendRequest(getExistingUserReq,  (err, res) => {",
											"    if (err) throw err",
											"    const { media } = res.json().message",
											"",
											"    // check media before the POST request",
											"    pm.variables.set('oldMedia', JSON.stringify(media))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 204",
											"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
											"",
											"// assert that absolutely nothing was returned",
											"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
											"",
											"// get user object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUser = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
											"pm.sendRequest(getExistingUserReq,  (err, res) => {",
											"    if (err) throw err",
											"    const oldMedia = JSON.parse(pm.variables.get('oldMedia'))",
											"    const { media } = res.json().message",
											"",
											"    // user was updated properly in the database",
											"    pm.test('Filename has not changed and the state of the media is the same', () => {",
											"        pm.expect(media).to.deep.equal(oldMedia)",
											"    })",
											"})"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "read",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												},
												{
													"key": "filename",
													"value": "{{userMediaCreated}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "media-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												},
												{
													"key": "filename",
													"value": "asdfasdfasdfasdfasdfasdfasdfasdf.jpg"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 404",
											"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
										]
									}
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "SETUP-get-user-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"pm.collectionVariables.set('userMediaCreated', context.cleared[0].unique)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": "media/dice.png"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get-user-media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 200",
													"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
													"",
													"// delete created media",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const deleteMediaReq = {",
													"    url: `${apiRoot}/users/${existingUser}/media`,",
													"    method: 'DELETE'",
													"}",
													"pm.sendRequest(deleteMediaReq, err => {",
													"    if (err) throw err",
													"})",
													"",
													"pm.collectionVariables.unset('userMediaCreated')"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												},
												{
													"key": "filename",
													"value": "{{userMediaCreated}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "update",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
													"pm.sendRequest(getExistingUserReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // user was updated properly in the database",
													"    pm.test('Filename not linked to the user', () => {",
													"        pm.expect(media.length).to.equal(0)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/cake.jpg",
														"media/dice.png",
														"media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "update-user-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"",
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// both cleared and rejected arrays must be present",
													"pm.test('Cleared and rejected arrays returned in an object', () => {",
													"    pm.expect(context).to.be.an('object')",
													"        .that.has.all.keys('cleared', 'rejected')",
													"})",
													"",
													"// make sure some rejects were returned to the client",
													"pm.test('Bad files were rejected', () => {",
													"    const { rejected } = context",
													"    pm.expect(rejected).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// make sure some cleared files were returned to the client",
													"pm.test('Good files were not rejected', () => {",
													"    const { cleared } = context",
													"    pm.expect(cleared).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
													"pm.sendRequest(getExistingUserReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // user was updated properly in the database",
													"    pm.test('Filename now linked to the user', () => {",
													"        pm.expect(media.length).to.greaterThan(0)",
													"    })",
													"",
													"    // delete created media",
													"    const deleteMediaReq = {",
													"        url: `${apiRoot}/users/${existingUser}/media`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteMediaReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": [
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/a.out",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/dice.png"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "204",
							"item": [
								{
									"name": "media-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "only-rejected-media-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/a.out",
														"media/bad.zip",
														"media/evil",
														"media/hello.png",
														"media/illegal.svg",
														"media/main.cpp",
														"media/sneakier.png",
														"media/sneaky.sh"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 204",
											"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
											"",
											"// assert that absolutely nothing was returned",
											"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
											"",
											"// get user object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingUser = pm.environment.get('EXISTING_USER')",
											"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
											"pm.sendRequest(getExistingUserReq,  (err, res) => {",
											"    if (err) throw err",
											"    const { media } = res.json().message",
											"",
											"    // user was updated properly in the database",
											"    pm.test('Filename not linked to the user', () => {",
											"        pm.expect(media.length).to.equal(0)",
											"    })",
											"})"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "user-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/cake.jpg",
														"media/dice.png",
														"media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "SETUP-delete-user-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"pm.collectionVariables.set('userMediaCreated', context.cleared[0].unique)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "userImage",
													"type": "file",
													"src": "media/dice.png"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete-user-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 200",
													"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingUser = pm.environment.get('EXISTING_USER')",
													"const getExistingUserReq = { url: `${apiRoot}/users/${existingUser}` }",
													"pm.sendRequest(getExistingUserReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // user was updated properly in the database",
													"    pm.test('Filename no longer linked to the user', () => {",
													"        pm.expect(media.length).to.equal(0)",
													"    })",
													"})",
													"",
													"pm.collectionVariables.unset('userMediaCreated')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_ROOT}}/users/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"users",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_USER}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "recipe",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "title-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = { prepTime, category, ingredients, instructions }",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-short",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'A',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-long",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-bad-characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: '\\'Boom!/Chicken\\'s #great_time\\' is OK, but \\'@@@\\' is not',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-already-exists",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'Linda\\'s Cake',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "preptime-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "ingredients-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "instructions-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "category-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "category-invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category: 'dunch',",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-valid-unit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = { unit: prepTimeUnit }",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-invalid-unit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = { unit: 'asdf' }",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-unit-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const ingredient = {",
													"        name,",
													"        amount: { quantity: `${amountNumerator}/${amountDenominator}` }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-pieces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const ingredient = { name, amount: { unit: 'pieces' } }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// count the number of recipes before the POST request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const getRecipesReq = { url: `${apiRoot}/recipes` }",
											"pm.sendRequest(getRecipesReq,  (err, res) => {",
											"    if (err) throw err",
											"    const oldRecipeCount = res.json().message.length",
											"    pm.variables.set('oldRecipeCount', oldRecipeCount)",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// count the number of recipes after the POST request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const getRecipesReq = { url: `${apiRoot}/recipes` }",
											"pm.sendRequest(getRecipesReq, (err, res) => {",
											"    if (err) throw err",
											"    const oldRecipeCount = pm.variables.get('oldRecipeCount')",
											"    pm.test('Same number of recipes exists', () => {",
											"        const newRecipeCount = res.json().message.length",
											"        pm.expect(newRecipeCount).to.be.equal(oldRecipeCount)",
											"    })",
											"})"
										]
									}
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "create-recipe",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const categories = ['breakfast', 'lunch', 'dinner', 'appetizer', 'dessert']",
													"const category = categories[Math.floor(Math.random() * 1000000) % 5]",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))",
													"",
													"// count the number of recipes before the POST request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getRecipesReq = { url: `${apiRoot}/recipes` }",
													"pm.sendRequest(getRecipesReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldRecipeCount = res.json().message.length",
													"    pm.variables.set('oldRecipeCount', oldRecipeCount)",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// count the number of recipes after the POST request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getRecipesReq = { url: `${apiRoot}/recipes` }",
													"pm.sendRequest(getRecipesReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldRecipeCount = pm.variables.get('oldRecipeCount')",
													"    pm.test('One more recipe exists than before', () => {",
													"        const newRecipeCount = res.json().message.length",
													"        pm.expect(newRecipeCount).to.be.equal(oldRecipeCount + 1)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "read",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "get-recipes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get response as JSON",
													"const jsonResponse = pm.response.json().message",
													"",
													"// ensure many recipes are returned",
													"pm.test('Multiple recipes returned', () => pm.expect(jsonResponse.length).to.greaterThan(1))",
													"",
													"// ensure each recipe is complete",
													"pm.test('Recipes are complete', () => {",
													"    const expectedRecipeKeys = [",
													"        '_id',",
													"        'media',",
													"        'title',",
													"        'uploader',",
													"        'createdOn',",
													"        'modifiedOn',",
													"        'category',",
													"        'about',",
													"        'prepTime',",
													"        'ingredients',",
													"        'instructions'",
													"    ]",
													"    jsonResponse.forEach(recipe => pm.expect(recipe).to.have.all.keys(...expectedRecipeKeys))",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes"
											]
										}
									},
									"response": []
								},
								{
									"name": "get-recipe-by-id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get response as JSON",
													"const jsonResponse = pm.response.json().message",
													"",
													"// ensure recipe is complete",
													"pm.test('Recipe is complete', () => {",
													"    const expectedRecipeKeys = [",
													"        '_id',",
													"        'media',",
													"        'title',",
													"        'uploader',",
													"        'createdOn',",
													"        'modifiedOn',",
													"        'category',",
													"        'about',",
													"        'prepTime',",
													"        'ingredients',",
													"        'instructions'",
													"    ]",
													"    pm.expect(jsonResponse).to.have.all.keys(...expectedRecipeKeys)",
													"})",
													"",
													"// check that the recipe returned is the recipe requested",
													"pm.test('Correct recipe returned', () => {",
													"    const expectedId = pm.environment.get('EXISTING_RECIPE')",
													"    pm.expect(jsonResponse._id).to.equal(expectedId)",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 200",
											"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "update",
					"item": [
						{
							"name": "400",
							"item": [
								{
									"name": "title-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = { prepTime, category, ingredients, instructions }",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'A',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-bad-characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: '\\'Boom!/Chicken\\'s #great_time\\' is OK, but \\'@@@\\' is not',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "title-invalid-already-exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: 'Marcy\\'s Pancakes',",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "preptime-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ingredients-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "instructions-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "category-not-included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "category-invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category: 'dunch',",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-valid-unit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = { unit: prepTimeUnit }",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-invalid-unit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = { unit: 'asdf' }",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"    const ingredient = {",
													"        name,",
													"        amount: {",
													"            quantity: `${amountNumerator}/${amountDenominator}`,",
													"            unit: amountUnit",
													"        }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-unit-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"    const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"    const ingredient = {",
													"        name,",
													"        amount: { quantity: `${amountNumerator}/${amountDenominator}` }",
													"    }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "quantifiable-quantity-not-included-with-pieces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// make dynamic request body",
													"const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"const prepTimeUnits = ['m', 'h', 'd']",
													"const prepTimeDenominators = ['1', '2', '4']",
													"const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"const prepTime = {",
													"    quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"    unit: prepTimeUnit",
													"}",
													"",
													"let category = ''",
													"switch (oldRecipe.category) {",
													"    case 'breakfast':",
													"        category = 'lunch'",
													"        break",
													"    case 'lunch':",
													"        category = 'dinner'",
													"        break",
													"    case 'dinner':",
													"        category = 'appetizer'",
													"        break",
													"    case 'appetizer':",
													"        category = 'dessert'",
													"        break",
													"    default:",
													"        category = 'breakfast'",
													"        break",
													"}",
													"",
													"const ingredients = []",
													"const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"    const name = temp[0].toUpperCase() + temp.substr(1)",
													"    const ingredient = { name, amount: { unit: 'pieces' } }",
													"    ingredients.push(ingredient)",
													"}",
													"",
													"const instructions = []",
													"for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"    instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"}",
													"",
													"const body = {",
													"    title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"    prepTime,",
													"    category,",
													"    ingredients,",
													"    instructions",
													"}",
													"pm.variables.set('body', JSON.stringify(body))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get current values from recipe before the PUT requests",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipeId = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipeId}` }",
											"pm.sendRequest(getExistingRecipeReq, (err, res) => {",
											"    if (err) throw err",
											"    const {",
											"        title,",
											"        about,",
											"        prepTime,",
											"        ingredients,",
											"        instructions,",
											"        category,",
											"        modifiedOn",
											"    } = res.json().message",
											"    ",
											"    // assemble old values",
											"    const oldRecipe = {}",
											"    oldRecipe.title = title",
											"    oldRecipe.about = about",
											"    oldRecipe.prepTime = prepTime",
											"    oldRecipe.ingredients = ingredients",
											"    oldRecipe.instructions = instructions",
											"    oldRecipe.category = category",
											"    oldRecipe.modifiedOn = modifiedOn",
											"",
											"    // make the current user properties visible to collection",
											"    pm.variables.set('oldRecipe', JSON.stringify(oldRecipe))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 400",
											"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
											"",
											"// get values from recipe after the PUT request",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipeId = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipeId}` }",
											"pm.sendRequest(getExistingRecipeReq, (err, res) => {",
											"    if (err) throw err",
											"    const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
											"    const {",
											"        title,",
											"        about,",
											"        prepTime,",
											"        ingredients,",
											"        instructions,",
											"        category,",
											"        modifiedOn",
											"    } = res.json().message",
											"    pm.test('Recipe title has not changed', () => {",
											"        pm.expect(title).to.equal(oldRecipe.title)",
											"    })",
											"    pm.test('Recipe about has not changed', () => {",
											"        pm.expect(about).to.equal(oldRecipe.about)",
											"    })",
											"    pm.test('Recipe category has not changed', () => {",
											"        pm.expect(category).to.equal(oldRecipe.category)",
											"    })",
											"    pm.test('Recipe modification date has not changed', () => {",
											"        pm.expect(modifiedOn).to.equal(oldRecipe.modifiedOn)    ",
											"    })",
											"    pm.test('Recipe preparation time has not changed', () => {",
											"        pm.expect(prepTime).to.deep.equal(oldRecipe.prepTime)",
											"    })",
											"    pm.test('Recipe ingredients list has not changed', () => {",
											"        pm.expect(ingredients).to.deep.equal(oldRecipe.ingredients)",
											"    })",
											"    pm.test('Recipe instructions set has not changed', () => {",
											"        pm.expect(instructions).to.deep.equal(oldRecipe.instructions)",
											"    })",
											"})"
										]
									}
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "update-recipe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get values from recipe after the PUT request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipeId = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipeId}` }",
													"pm.sendRequest(getExistingRecipeReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldRecipe = JSON.parse(pm.variables.get('oldRecipe'))",
													"    const {",
													"        title,",
													"        about,",
													"        prepTime,",
													"        ingredients,",
													"        instructions,",
													"        category,",
													"        modifiedOn",
													"    } = res.json().message",
													"    pm.test('Recipe title has changed', () => {",
													"        pm.expect(title).to.not.equal(oldRecipe.title)",
													"    })",
													"    pm.test('Recipe about has changed', () => {",
													"        pm.expect(about).to.not.equal(oldRecipe.about)",
													"    })",
													"    pm.test('Recipe category has changed', () => {",
													"        pm.expect(category).to.not.equal(oldRecipe.category)",
													"    })",
													"    pm.test('Recipe modification date has changed', () => {",
													"        pm.expect(modifiedOn).to.not.equal(oldRecipe.modifiedOn)    ",
													"    })",
													"    pm.test('Recipe preparation time has changed', () => {",
													"        pm.expect(prepTime).to.not.deep.equal(oldRecipe.prepTime)",
													"    })",
													"    pm.test('Recipe ingredients list has changed', () => {",
													"        pm.expect(ingredients).to.not.deep.equal(oldRecipe.ingredients)",
													"    })",
													"    pm.test('Recipe instructions set has changed', () => {",
													"        pm.expect(instructions).to.not.deep.equal(oldRecipe.instructions)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// get current values from recipe before the PUT requests",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipeId = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipeId}` }",
													"pm.sendRequest(getExistingRecipeReq, (err, res) => {",
													"    if (err) throw err",
													"    ",
													"    // assemble old values",
													"    const oldRecipe = {}",
													"    oldRecipe.title = res.json().message.title",
													"    oldRecipe.about = res.json().message.about",
													"    oldRecipe.prepTime = res.json().message.prepTime",
													"    oldRecipe.ingredients = res.json().message.ingredients",
													"    oldRecipe.instructions = res.json().message.instructions",
													"    oldRecipe.category = res.json().message.category",
													"    oldRecipe.modifiedOn = res.json().message.modifiedOn",
													"",
													"    // make dynamic request body",
													"    const prepTimeUnits = ['m', 'h', 'd']",
													"    const prepTimeDenominators = ['1', '2', '4']",
													"    const prepTimeNumerator = (Math.floor(Math.random() * 1000000) % 64 + 1).toString()",
													"    const prepTimeDenominator = prepTimeDenominators[Math.floor(Math.random() * 1000000) % 3]",
													"    const prepTimeUnit = prepTimeUnits[Math.floor(Math.random() * 1000000) % 3]",
													"    const prepTime = {",
													"        quantity: `${prepTimeNumerator}/${prepTimeDenominator}`,",
													"        unit: prepTimeUnit",
													"    }",
													"",
													"    let category = ''",
													"    switch (oldRecipe.category) {",
													"        case 'breakfast':",
													"            category = 'lunch'",
													"            break",
													"        case 'lunch':",
													"            category = 'dinner'",
													"            break",
													"        case 'dinner':",
													"            category = 'appetizer'",
													"            break",
													"        case 'appetizer':",
													"            category = 'dessert'",
													"            break",
													"        default:",
													"            category = 'breakfast'",
													"            break",
													"    }",
													"",
													"    const ingredients = []",
													"    const ingredientUnits = ['qt', 'L', 'lb', 'oz']",
													"    const ingredientDenominators = ['1', '2', '4', '8', '16']",
													"    for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"        const temp = pm.variables.replaceIn('{{$randomNoun}}')",
													"        const name = temp[0].toUpperCase() + temp.substr(1)",
													"        const amountNumerator = (Math.floor(Math.random() * 1000000) % 16 + 1).toString()",
													"        const amountDenominator = ingredientDenominators[Math.floor(Math.random() * 1000000) % 5]",
													"        const amountUnit = ingredientUnits[Math.floor(Math.random() * 1000000) % 4]",
													"        const ingredient = {",
													"            name,",
													"            amount: {",
													"                quantity: `${amountNumerator}/${amountDenominator}`,",
													"                unit: amountUnit",
													"            }",
													"        }",
													"        ingredients.push(ingredient)",
													"    }",
													"",
													"    const instructions = []",
													"    for (let i = 0; i < pm.variables.replaceIn('{{$randomInt}}') + 1; i++) {",
													"        instructions.push(pm.variables.replaceIn('{{$randomLoremSentences}}'))",
													"    }",
													"",
													"    const body = {",
													"        title: pm.variables.replaceIn('{{$randomProductAdjective}}') +",
													"           ` ${pm.variables.replaceIn('{{$randomProductAdjective}}')}` +",
													"           ` ${pm.variables.replaceIn('{{$randomProduct}}')}`,",
													"        about: pm.variables.replaceIn('{{$randomLoremSentences}}'),",
													"        prepTime,",
													"        category,",
													"        ingredients,",
													"        instructions",
													"    }",
													"    pm.variables.set('body', JSON.stringify(body))",
													"",
													"    // make the current user properties visible to collection",
													"    pm.variables.set('oldRecipe', JSON.stringify(oldRecipe))",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "delete-recipe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// count the number of recipes after the DELETE request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getRecipesReq = { url: `${apiRoot}/recipes` }",
													"pm.sendRequest(getRecipesReq, (err, res) => {",
													"    if (err) throw err",
													"    const oldRecipeCount = pm.variables.get('oldRecipeCount')",
													"    pm.test('One less recipe exists than before', () => {",
													"        const newRecipeCount = res.json().message.length",
													"        pm.expect(newRecipeCount).to.be.equal(oldRecipeCount - 1)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// count the number of recipes before the DELETE request",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const getRecipesReq = { url: `${apiRoot}/recipes` }",
													"pm.sendRequest(getRecipesReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldRecipeCount = res.json().message.length",
													"    const recipeToDelete = res.json().message[oldRecipeCount - 1]._id",
													"",
													"    pm.variables.set('recipeToDelete', recipeToDelete)",
													"    pm.variables.set('oldRecipeCount', oldRecipeCount)",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{recipeToDelete}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "recipe-media",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/cake.jpg",
														"media/dice.png",
														"media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "create-recipe-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// get recipe object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // check media length before the POST request",
													"    pm.variables.set('oldMediaLength', JSON.stringify(media.length))",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"",
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// both cleared and rejected arrays must be present",
													"pm.test('Cleared and rejected arrays returned in an object', () => {",
													"    pm.expect(context).to.be.an('object')",
													"        .that.has.all.keys('cleared', 'rejected')",
													"})",
													"",
													"// make sure some rejects were returned to the client",
													"pm.test('Bad files were rejected', () => {",
													"    const { rejected } = context",
													"    pm.expect(rejected).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// make sure some cleared files were returned to the client",
													"pm.test('Good files were not rejected', () => {",
													"    const { cleared } = context",
													"    pm.expect(cleared).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldMediaLength = JSON.parse(pm.variables.get('oldMediaLength'))",
													"    const { media } = res.json().message",
													"",
													"    // recipe was updated properly in the database",
													"    pm.test('One more filename linked to recipe', () => {",
													"        pm.expect(media.length).to.greaterThan(oldMediaLength)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/a.out",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/bad.zip",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/cake.jpg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/dice.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/doughnuts.jpg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/evil",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/hello.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/illegal.svg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/main.cpp",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/sneakier.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/sneaky.sh",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/temp"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "204",
							"item": [
								{
									"name": "media-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "only-rejected-media-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/a.out",
														"media/bad.zip",
														"media/evil",
														"media/hello.png",
														"media/illegal.svg",
														"media/main.cpp",
														"media/sneakier.png",
														"media/sneaky.sh"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get recipe object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
											"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
											"    if (err) throw err",
											"    const { media } = res.json().message",
											"",
											"    // check media before the POST request",
											"    pm.variables.set('oldMedia', JSON.stringify(media))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 204",
											"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
											"",
											"// assert that absolutely nothing was returned",
											"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
											"",
											"// get recipe object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
											"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
											"    if (err) throw err",
											"    const oldMedia = JSON.parse(pm.variables.get('oldMedia'))",
											"    const { media } = res.json().message",
											"",
											"    // recipe was updated properly in the database",
											"    pm.test('Filename has not changed and the state of the media is the same', () => {",
											"        pm.expect(media).to.deep.equal(oldMedia)",
											"    })",
											"})"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "read",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												},
												{
													"key": "filename",
													"value": "{{recipeMediaCreated}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "media-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												},
												{
													"key": "filename",
													"value": "asdfasdfasdfasdfasdfasdfasdfasdf.jpg"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 404",
											"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
										]
									}
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "SETUP-get-recipe-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"pm.collectionVariables.set('recipeMediaCreated', context.cleared[0].unique)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": "/Users/mnystoriak/Workspace/recipe-book/postman/media/cake.jpg"
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get-recipe-media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 200",
													"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
													"",
													"// delete created media",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const deleteMediaReq = {",
													"    url: `${apiRoot}/recipes/${existingRecipe}/media`,",
													"    method: 'DELETE'",
													"}",
													"pm.sendRequest(deleteMediaReq, err => {",
													"    if (err) throw err",
													"})",
													"",
													"pm.collectionVariables.unset('recipeMediaCreated')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media/:filename",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media",
												":filename"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												},
												{
													"key": "filename",
													"value": "{{recipeMediaCreated}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "update",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// get recipe object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // check media length before the POST request",
													"    pm.variables.set('oldMedia', JSON.stringify(media))",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
													"",
													"// get recipe object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldMedia = JSON.parse(pm.variables.get('oldMedia'))",
													"    const { media } = res.json().message",
													"",
													"    // recipe was updated properly in the database",
													"    pm.test('Filename not linked to the recipe', () => {",
													"        pm.expect(media.length).to.equal(oldMedia.length)",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/cake.jpg",
														"media/dice.png",
														"media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "201",
							"item": [
								{
									"name": "update-recipe-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// get recipe object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // check media length before the POST request",
													"    pm.variables.set('oldMedia', JSON.stringify(media))",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"",
													"// assert that status code is 201",
													"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
													"",
													"// both cleared and rejected arrays must be present",
													"pm.test('Cleared and rejected arrays returned in an object', () => {",
													"    pm.expect(context).to.be.an('object')",
													"        .that.has.all.keys('cleared', 'rejected')",
													"})",
													"",
													"// make sure some rejects were returned to the client",
													"pm.test('Bad files were rejected', () => {",
													"    const { rejected } = context",
													"    pm.expect(rejected).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// make sure some cleared files were returned to the client",
													"pm.test('Good files were not rejected', () => {",
													"    const { cleared } = context",
													"    pm.expect(cleared).to.be.an('array')",
													"        .that.has.lengthOf.greaterThan(0)",
													"})",
													"",
													"// get recipe object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const oldMedia = JSON.parse(pm.variables.get('oldMedia'))",
													"    const { media } = res.json().message",
													"",
													"    // recipe was updated properly in the database",
													"    pm.test('Filename now linked to the recipe', () => {",
													"        pm.expect(media.length).to.greaterThan(oldMedia.length)",
													"    })",
													"",
													"    // delete created media",
													"    const deleteMediaReq = {",
													"        url: `${apiRoot}/recipes/${existingRecipe}/media`,",
													"        method: 'DELETE'",
													"    }",
													"    pm.sendRequest(deleteMediaReq, err => {",
													"        if (err) throw err",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/a.out",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/bad.zip",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/cake.jpg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/dice.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/doughnuts.jpg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/evil",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/hello.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/illegal.svg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/main.cpp",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/sneakier.png",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/sneaky.sh",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/temp"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "204",
							"item": [
								{
									"name": "media-not-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "only-rejected-media-included",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/a.out",
														"media/bad.zip",
														"media/evil",
														"media/hello.png",
														"media/illegal.svg",
														"media/main.cpp",
														"media/sneakier.png",
														"media/sneaky.sh"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// get recipe object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
											"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
											"    if (err) throw err",
											"    const { media } = res.json().message",
											"",
											"    // check media length before the POST request",
											"    pm.variables.set('oldMedia', JSON.stringify(media))",
											"})"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// assert that status code is 204",
											"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
											"",
											"// assert that absolutely nothing was returned",
											"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
											"",
											"// get recipe object for direct validation",
											"const apiRoot = pm.environment.get('API_ROOT')",
											"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
											"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
											"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
											"    if (err) throw err",
											"    const oldMedia = JSON.parse(pm.variables.get('oldMedia'))",
											"    const { media } = res.json().message",
											"",
											"    // recipe was updated properly in the database",
											"    pm.test('Still zero images linked to the recipe', () => {",
											"        pm.expect(media.length).to.equal(oldMedia.length)",
											"    })",
											"})"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "404",
							"item": [
								{
									"name": "recipe-not-found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 404",
													"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"media/cake.jpg",
														"media/dice.png",
														"media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "asdfasdfasdfasdfasdfasdf"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "200",
							"item": [
								{
									"name": "SETUP-delete-recipe-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const { context } = pm.response.json()",
													"pm.collectionVariables.set('recipeMediaCreated', context.cleared[0].unique)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "foodImages",
													"type": "file",
													"src": [
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/cake.jpg",
														"/Users/mnystoriak/Workspace/recipe-book/postman/media/doughnuts.jpg"
													]
												}
											]
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "delete-recipe-media",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// assert that status code is 200",
													"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
													"",
													"// get user object for direct validation",
													"const apiRoot = pm.environment.get('API_ROOT')",
													"const existingRecipe = pm.environment.get('EXISTING_RECIPE')",
													"const getExistingRecipeReq = { url: `${apiRoot}/recipes/${existingRecipe}` }",
													"pm.sendRequest(getExistingRecipeReq,  (err, res) => {",
													"    if (err) throw err",
													"    const { media } = res.json().message",
													"",
													"    // recipe was updated properly in the database",
													"    pm.test('Filename no longer linked to the recipe', () => {",
													"        pm.expect(media.length).to.equal(0)",
													"    })",
													"})",
													"",
													"pm.collectionVariables.unset('recipeMediaCreated')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{API_ROOT}}/recipes/:id/media",
											"host": [
												"{{API_ROOT}}"
											],
											"path": [
												"recipes",
												":id",
												"media"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{EXISTING_RECIPE}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}