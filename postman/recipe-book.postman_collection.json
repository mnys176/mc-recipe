{
	"info": {
		"_postman_id": "0e98d475-3089-48d7-89f4-5c973a1de844",
		"name": "recipe-book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "recipe",
			"item": [
				{
					"name": "get-recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure many recipes are returned",
									"pm.test('Multiple recipes returned', () => pm.expect(jsonResponse.length).to.greaterThan(1))",
									"",
									"// ensure each recipe is complete",
									"pm.test('Recipes are complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'media',",
									"        'title',",
									"        'uploader',",
									"        'createdOn',",
									"        'modifiedOn',",
									"        'category',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions',",
									"        '__v'",
									"    ]",
									"    jsonResponse.forEach(recipe => pm.expect(recipe).to.have.all.keys(...expectedRecipeKeys))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipe-by-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get response as JSON",
									"const jsonResponse = pm.response.json().message",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// ensure recipe is complete",
									"pm.test('Recipe is complete', () => {",
									"    const expectedRecipeKeys = [",
									"        '_id',",
									"        'media',",
									"        'title',",
									"        'uploader',",
									"        'createdOn',",
									"        'modifiedOn',",
									"        'category',",
									"        'about',",
									"        'prepTime',",
									"        'ingredients',",
									"        'instructions',",
									"        '__v'",
									"    ]",
									"    pm.expect(jsonResponse).to.have.all.keys(...expectedRecipeKeys)",
									"})",
									"",
									"// check that the recipe returned is the recipe requested",
									"pm.test('Correct recipe returned', () => {",
									"    const expectedId = '614009af5b338a1dd33615e3'",
									"    pm.expect(jsonResponse._id).to.equal(expectedId)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/614009af5b338a1dd33615e3",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"614009af5b338a1dd33615e3"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"",
									"// count the number of recipes before the POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// extract and store the UUID for later",
									"const { message } = pm.response.json()",
									"const objectIdToDelete = message.substr(23, 24)",
									"pm.collectionVariables.set('recipeObjectIdToDelete', objectIdToDelete)",
									"",
									"// count the number of recipes after the POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('One more recipe exists than before', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes + 1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Small Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"breakfast\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "preptime-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"dinner\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "ingredients-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"breakfast\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "instructions-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"asdf\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-valid-unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-invalid-unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"prepTime\": { \"unit\": \"asdf\" },\n    \"category\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\", \"unit\": \"lb\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-unit-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"quantity\": \"140\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "quantifiable-quantity-not-included-with-pieces",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"",
									"// count the number of recipes before the bad POST request",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const numOldRecipes = res.json().message.length",
									"",
									"    // make the request and current recipe count visible to tests",
									"    pm.collectionVariables.set('postTestGetRecipes', JSON.stringify(req))",
									"    pm.collectionVariables.set('numOldRecipes', numOldRecipes)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('postTestGetRecipes'))",
									"const numOldRecipes = pm.collectionVariables.get('numOldRecipes')",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// count the number of recipes after the bad POST request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    pm.test('Same number of recipes exists', () => {",
									"        const numNewRecipes = res.json().message.length",
									"        pm.expect(numNewRecipes).to.be.equal(numOldRecipes)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mike's Giant Peach\",\n    \"category\": \"lunch\",\n    \"prepTime\": { \"quantity\": \"1/2\", \"unit\": \"h\" },\n    \"ingredients\": [\n        {\n            \"name\": \"big peach\",\n            \"amount\": { \"unit\": \"pieces\" }\n        }\n    ],\n    \"instructions\": [\n        \"Get a peach.\",\n        \"Make it big.\",\n        \"Big peach.\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.not.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.not.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.not.equal(oldRecipeCategory)    ",
									"",
									"        // set old category to new category to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.greaterThan(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.not.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.not.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.not.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const objectIdToDelete = pm.collectionVariables.get('recipeObjectIdToDelete')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes/${objectIdToDelete}`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "title-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category-invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"asdf\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "preptime-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"ingredients\": {{newRecipeIngredients}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ingredients-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"instructions\": {{newRecipeInstructions}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instructions-not-included",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get relevant collection variables",
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"const oldRecipeTitle = pm.collectionVariables.get('oldRecipeTitle')",
									"const oldRecipeAbout = pm.collectionVariables.get('oldRecipeAbout')",
									"const oldRecipeCategory = pm.collectionVariables.get('oldRecipeCategory')",
									"const oldRecipeModifiedOn = pm.collectionVariables.get('oldRecipeModifiedOn')",
									"const oldRecipePrepTime = JSON.parse(pm.collectionVariables.get('oldRecipePrepTime'))",
									"const oldRecipeIngredients = JSON.parse(pm.collectionVariables.get('oldRecipeIngredients'))",
									"const oldRecipeInstructions = JSON.parse(pm.collectionVariables.get('oldRecipeInstructions'))",
									"",
									"// assert that status code is 400",
									"pm.test('Status code is 400', () => pm.response.to.have.status(400))",
									"",
									"// get values from recipe after the PUT request",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    const jsonRes = res.json().message",
									"    pm.test('Recipe title has not changed', () => {",
									"        const newRecipeTitle = jsonRes.title",
									"        pm.expect(newRecipeTitle).to.equal(oldRecipeTitle)    ",
									"",
									"        // set old title to new title to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeTitle', newRecipeTitle)",
									"    })",
									"    pm.test('Recipe about has not changed', () => {",
									"        const newRecipeAbout = jsonRes.about",
									"        pm.expect(newRecipeAbout).to.equal(oldRecipeAbout)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeAbout', newRecipeAbout)",
									"    })",
									"    pm.test('Recipe category has not changed', () => {",
									"        const newRecipeCategory = jsonRes.category",
									"        pm.expect(newRecipeCategory).to.equal(oldRecipeCategory)    ",
									"",
									"        // set old about to new about to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeCategory', newRecipeCategory)",
									"    })",
									"    pm.test('Recipe modification date has not changed', () => {",
									"        const newRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"        pm.expect(newRecipeModifiedOn).to.equal(oldRecipeModifiedOn)    ",
									"    })",
									"    pm.test('Recipe preparation time has not changed', () => {",
									"        const newRecipePrepTime = jsonRes.prepTime",
									"        pm.expect(newRecipePrepTime).to.deep.equal(oldRecipePrepTime)    ",
									"",
									"        // set old preparation time to new preparation time to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    })",
									"    pm.test('Recipe ingredients list has not changed', () => {",
									"        const newRecipeIngredients = jsonRes.ingredients",
									"        pm.expect(newRecipeIngredients).to.deep.equal(oldRecipeIngredients)    ",
									"",
									"        // set old ingredients to new ingredients to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    })",
									"    pm.test('Recipe instructions set has not changed', () => {",
									"        const newRecipeInstructions = jsonRes.instructions",
									"        pm.expect(newRecipeInstructions).to.deep.equal(oldRecipeInstructions)    ",
									"",
									"        // set old instructions to new instructions to enable consecutive runs without fail",
									"        pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putTestGetRecipeById'))",
									"",
									"// get current values from agent before the PUT requests",
									"pm.sendRequest(req, (err, res) => {",
									"    if (err) throw err",
									"    jsonRes = res.json().message",
									"    ",
									"    // create a rotation cycle that constantly changes values",
									"    const oldRecipeTitle = jsonRes.title",
									"    const oldRecipeAbout = jsonRes.about",
									"    const oldRecipePrepTime = jsonRes.prepTime",
									"    const oldRecipeIngredients = jsonRes.ingredients",
									"    const oldRecipeInstructions = jsonRes.instructions",
									"    const oldRecipeCategory = jsonRes.category",
									"    const oldRecipeModifiedOn = Date.parse(jsonRes.modifiedOn)",
									"",
									"    // new title is the old title reversed",
									"    const newRecipeTitle = oldRecipeTitle.split(' ').reverse().join(' ')",
									"",
									"    // new about is the old about in reverse",
									"    const newRecipeAbout = oldRecipeAbout.split(' ').reverse().join(' ')",
									"",
									"    // new preparation time is the reversed old quantity in the same units",
									"    const newRecipePrepTime = {",
									"        quantity: oldRecipePrepTime.readable.split('').reverse().join(''),",
									"        unit: oldRecipePrepTime.unit",
									"    }",
									"",
									"    // new ingredients are now all \"swirled\"",
									"    const newRecipeIngredients = oldRecipeIngredients.map(i => {",
									"        const name = i.name.split('').reverse().join('')",
									"        const unit = i.amount.unit === 'pieces' ? 'to taste' : 'pieces'",
									"        const quantity = i.amount.readable.split('').reverse().join('')",
									"        return { name, amount: { quantity, unit } }",
									"    })",
									"",
									"    // new instructions are the old instructions reversed",
									"    const newRecipeInstructions = [...oldRecipeInstructions].reverse()",
									"",
									"    // new category is 'dinner' if the old one was 'breakfast', otherwise it's 'breakfast'",
									"    const newRecipeCategory = oldRecipeCategory === 'breakfast' ? 'dinner' : 'breakfast'",
									"",
									"    // make the request and current recipe properties visible to tests",
									"    pm.collectionVariables.set('putTestGetRecipeById', JSON.stringify(req))",
									"    pm.collectionVariables.set('oldRecipeTitle', oldRecipeTitle)",
									"    pm.collectionVariables.set('oldRecipeAbout', oldRecipeAbout)",
									"    pm.collectionVariables.set('oldRecipeCategory', oldRecipeCategory)",
									"    pm.collectionVariables.set('oldRecipePrepTime', JSON.stringify(oldRecipePrepTime))",
									"    pm.collectionVariables.set('oldRecipeIngredients', JSON.stringify(oldRecipeIngredients))",
									"    pm.collectionVariables.set('oldRecipeInstructions', JSON.stringify(oldRecipeInstructions))",
									"    pm.collectionVariables.set('oldRecipeModifiedOn', oldRecipeModifiedOn)",
									"    pm.collectionVariables.set('newRecipeTitle', newRecipeTitle)",
									"    pm.collectionVariables.set('newRecipeAbout', newRecipeAbout)",
									"    pm.collectionVariables.set('newRecipeCategory', newRecipeCategory)",
									"    pm.collectionVariables.set('newRecipePrepTime', JSON.stringify(newRecipePrepTime))",
									"    pm.collectionVariables.set('newRecipeIngredients', JSON.stringify(newRecipeIngredients))",
									"    pm.collectionVariables.set('newRecipeInstructions', JSON.stringify(newRecipeInstructions))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{newRecipeTitle}}\",\n    \"about\": \"{{newRecipeAbout}}\",\n    \"category\": \"{{newRecipeCategory}}\",\n    \"prepTime\": {{newRecipePrepTime}},\n    \"ingredients\": {{newRecipeIngredients}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const req = JSON.parse(pm.collectionVariables.get('deleteTestGetRecipeById'))",
									"",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the recipe no longer exists after the DELETE request",
									"    console.log(res.code)",
									"    pm.test('Recipe no longer exists after request', () => pm.expect(res.code).to.be.equal(404))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const objectIdToDelete = pm.collectionVariables.get('recipeObjectIdToDelete')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes/${objectIdToDelete}`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"",
									"    // test that the recipe currently exists before the DELETE request",
									"    pm.test('Recipe exists before request', () => pm.expect(res.code).to.be.equal(200))",
									"",
									"    // make the request visible to tests",
									"    pm.collectionVariables.set('deleteTestGetRecipeById', JSON.stringify(req))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/{{recipeObjectIdToDelete}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"{{recipeObjectIdToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "recipe-media",
			"item": [
				{
					"name": "create-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes/6142bd1d47c1644e157e4aa9`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"pm.collectionVariables.set('postMediaTestGetRecipeById', JSON.stringify(req))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postMediaTestGetRecipeById'))",
									"const { context } = pm.response.json()",
									"",
									"// extract a filename for later",
									"pm.collectionVariables.set('mediaFilenameToGet', context.cleared[0])",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/cake.jpg",
										"media/evil",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('postMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(1)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-recipe-media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media/{{mediaFilenameToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media",
								"{{mediaFilenameToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media/{{mediaFilenameToGet}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media",
								"{{mediaFilenameToGet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media/asdfasdfasdfasdfasdfasdfasdfasdf.jpg",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media",
								"asdfasdfasdfasdfasdfasdfasdfasdf.jpg"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes/6142bd1d47c1644e157e4aa9`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"pm.collectionVariables.set('putMediaTestGetRecipeById', JSON.stringify(req))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putMediaTestGetRecipeById'))",
									"const { context } = pm.response.json()",
									"",
									"// assert that status code is 201",
									"pm.test('Status code is 201', () => pm.response.to.have.status(201))",
									"",
									"// both cleared and rejected arrays must be present",
									"pm.test('Cleared and rejected arrays returned in an object', () => {",
									"    pm.expect(context).to.be.an('object')",
									"        .that.has.all.keys('cleared', 'rejected')",
									"})",
									"",
									"// make sure some rejects were returned to the client",
									"pm.test('Bad files were rejected', () => {",
									"    const { rejected } = context",
									"    pm.expect(rejected).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// make sure some cleared files were returned to the client",
									"pm.test('Good files were not rejected', () => {",
									"    const { cleared } = context",
									"    pm.expect(cleared).to.be.an('array')",
									"        .that.has.lengthOf.greaterThan(0)",
									"})",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    console.log(res.json())",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "media-not-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(3)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "only-rejected-media-included",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 204",
									"pm.test('Status code is 204', () => pm.response.to.have.status(204))",
									"",
									"// assert that absolutely nothing was returned",
									"pm.test('Nothing to do on the server', () => pm.expect(pm.response.responseSize).to.equal(0))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/a.out",
										"media/bad.zip",
										"media/evil",
										"media/hello.png",
										"media/illegal.svg",
										"media/main.cpp",
										"media/sneakier.png",
										"media/sneaky.sh"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('putMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-recipe-media",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set variables to form a request",
									"const apiRoot = pm.collectionVariables.get('apiRoot')",
									"const protocol = pm.collectionVariables.get('protocol')",
									"const req = {",
									"    url: `${protocol}://${apiRoot}/recipes/6142bd1d47c1644e157e4aa9`,",
									"    method: 'GET',",
									"    headers: { 'Content-Type': 'application/json' }",
									"}",
									"pm.collectionVariables.set('deleteMediaTestGetRecipeById', JSON.stringify(req))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('deleteMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 200",
									"pm.test('Status code is 200', () => pm.response.to.have.status(200))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/6142bd1d47c1644e157e4aa9/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"6142bd1d47c1644e157e4aa9",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "recipe-not-found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const req = JSON.parse(pm.collectionVariables.get('deleteMediaTestGetRecipeById'))",
									"",
									"// assert that status code is 404",
									"pm.test('Status code is 404', () => pm.response.to.have.status(404))",
									"",
									"// get recipe object for direct validation",
									"pm.sendRequest(req,  (err, res) => {",
									"    if (err) throw err",
									"    const { media } = res.json().message",
									"",
									"    // recipe was updated properly in the database",
									"    pm.test('Recipe media properly linked', () => {",
									"        pm.expect(media.length).to.equal(0)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foodImages",
									"type": "file",
									"src": [
										"media/cake.jpg",
										"media/dice.png",
										"media/doughnuts.jpg"
									]
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{apiRoot}}/recipes/asdfasdfasdfasdfasdfasdf/media",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiRoot}}"
							],
							"path": [
								"recipes",
								"asdfasdfasdfasdfasdfasdf",
								"media"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// enumeration for testing modes",
					"const modes = {",
					"    DEV: 'development',",
					"    PROD: 'production'",
					"}",
					"",
					"// DEV for localhost or PROD for production environment",
					"const mode = modes.DEV",
					"",
					"// determine whether to use HTTP or HTTPS",
					"const protocol = mode === modes.PROD ? 'https' : 'http'",
					"pm.collectionVariables.set('protocol', protocol)",
					"",
					"// determine API root",
					"const productionDomain = '<make production domain>'",
					"const developmentDomain = 'localhost:3000'",
					"const apiRoot = mode === modes.PROD ? productionDomain : developmentDomain",
					"pm.collectionVariables.set('apiRoot', `${apiRoot}/api`)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "apiRoot",
			"value": "localhost:3000"
		},
		{
			"key": "postTestGetRecipes",
			"value": ""
		},
		{
			"key": "numOldRecipes",
			"value": ""
		},
		{
			"key": "recipeObjectIdToDelete",
			"value": ""
		},
		{
			"key": "putTestGetRecipeById",
			"value": ""
		},
		{
			"key": "oldRecipeTitle",
			"value": ""
		},
		{
			"key": "oldRecipeAbout",
			"value": ""
		},
		{
			"key": "oldRecipeCategory",
			"value": ""
		},
		{
			"key": "oldRecipePrepTime",
			"value": ""
		},
		{
			"key": "oldRecipeIngredients",
			"value": ""
		},
		{
			"key": "oldRecipeInstructions",
			"value": ""
		},
		{
			"key": "oldRecipeModifiedOn",
			"value": ""
		},
		{
			"key": "newRecipeTitle",
			"value": ""
		},
		{
			"key": "newRecipeAbout",
			"value": ""
		},
		{
			"key": "newRecipeCategory",
			"value": ""
		},
		{
			"key": "newRecipePrepTime",
			"value": ""
		},
		{
			"key": "newRecipeIngredients",
			"value": ""
		},
		{
			"key": "newRecipeInstructions",
			"value": ""
		},
		{
			"key": "deleteTestGetRecipeById",
			"value": ""
		},
		{
			"key": "postMediaTestGetRecipeById",
			"value": ""
		},
		{
			"key": "putMediaTestGetRecipeById",
			"value": ""
		},
		{
			"key": "deleteMediaTestGetRecipeById",
			"value": ""
		},
		{
			"key": "mediaFilenameToGet",
			"value": ""
		}
	]
}